// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: benchmark.proto
#region Designer generated code

using System;
using System.Threading.Tasks;
using DotBPE.Rpc;
using DotBPE.Protocol.Amp;
using DotBPE.Rpc.Exceptions;
using Google.Protobuf;

namespace  {

    //start for class BenchmarkTestClient
    public sealed class BenchmarkTestClient : AmpInvokeClient
    {
        public BenchmarkTestClient(IRpcClient<AmpMessage> client) : base(client)
        {
        }
        public BenchmarkTestClient(string remoteAddress) : base(remoteAddress)
        {
        }


        //同步方法
        public RpcResult<BenchmarkMessage> Echo(BenchmarkMessage req)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(50000, 1);
            message.Data = request.ToByteArray();
            var response = base.CallInvoker.BlockingCall(message);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
            var result = new RpcResult<BenchmarkMessage>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = BenchmarkMessage.Parser.ParseFrom(response.Data);
            }
            return result;
        }

        public async Task<RpcResult<BenchmarkMessage>> EchoAsync(BenchmarkMessage req, int timeOut = 3000)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(50000, 1);
            message.Data = request.ToByteArray();
            var response = await base.CallInvoker.AsyncCall(message, timeOut);
            if (response == null)
            {
                throw new RpcException("error,response is null !");
            }
           var result = new RpcResult<BenchmarkMessage>();
            if (response.Code != 0)
            {
                result.Code = response.Code;
            }
            else if (response.Data == null)
            {
                result.Code = ErrorCodes.CODE_INTERNAL_ERROR;
            }
            else
            {
                result.Data = BenchmarkMessage.Parser.ParseFrom(response.Data);
            }
            return result;
        }


    }
    //end for class BenchmarkTestClient
}
#endregion