// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#region Designer generated code

using DotBPE.Protocol.Amp;
using DotBPE.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace DotBPE.Benchmark.Core
{
    //start for class AbstractBenchmarkTest
    public abstract class BenchmarkTestBase : ServiceActor
    {
        protected override int ServiceId => 50000;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 BenchmarkTest.Test
                case 1: return this.ProcessTestAsync(req);

                //方法 BenchmarkTest.Test10MS
                case 2: return this.ProcessTest10MSAsync(req);

                //方法 BenchmarkTest.Test30MS
                case 3: return this.ProcessTest30MSAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessTestAsync(AmpMessage req)
        {
            BenchmarkMessage request = null;

            if (req.Data == null)
            {
                request = new BenchmarkMessage();
            }
            else
            {
                request = BenchmarkMessage.Parser.ParseFrom(req.Data);
            }

            var result = await TestAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<BenchmarkMessage>> TestAsync( BenchmarkMessage req);

        //调用委托
        private async Task<AmpMessage> ProcessTest10MSAsync(AmpMessage req)
        {
            BenchmarkMessage request = null;

            if (req.Data == null)
            {
                request = new BenchmarkMessage();
            }
            else
            {
                request = BenchmarkMessage.Parser.ParseFrom(req.Data);
            }

            var result = await Test10MSAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<BenchmarkMessage>> Test10MSAsync( BenchmarkMessage req);

        //调用委托
        private async Task<AmpMessage> ProcessTest30MSAsync(AmpMessage req)
        {
            BenchmarkMessage request = null;

            if (req.Data == null)
            {
                request = new BenchmarkMessage();
            }
            else
            {
                request = BenchmarkMessage.Parser.ParseFrom(req.Data);
            }

            var result = await Test30MSAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<BenchmarkMessage>> Test30MSAsync( BenchmarkMessage req);

    }

    //end for class AbstractBenchmarkTest
}

#endregion Designer generated code